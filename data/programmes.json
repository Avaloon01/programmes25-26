<!doctype html>
<html lang="fr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Adaptateur de semaines – Programmes P4</title>
<style>
  :root{
    --bg:#f7f7fb; --card:#fff; --ink:#111; --muted:#666; --accent:#2563eb;
    --ok:#16a34a; --warn:#b45309; --err:#dc2626; --b:#e5e7eb; --radius:14px;
  }
  *{box-sizing:border-box}
  body{margin:0;font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;background:var(--bg);color:var(--ink)}
  header{padding:18px 22px;background:var(--card);border-bottom:1px solid var(--b);position:sticky;top:0;z-index:5}
  header h1{margin:0;font-size:20px}
  main{max-width:1200px;margin:20px auto;padding:0 16px;display:grid;gap:16px}
  .grid{display:grid;grid-template-columns:1fr 1fr;gap:16px}
  .card{background:var(--card);border:1px solid var(--b);border-radius:var(--radius);box-shadow:0 6px 20px rgba(0,0,0,.06)}
  .card header{border:0;border-bottom:1px solid var(--b);border-radius:var(--radius) var(--radius) 0 0}
  .card header h2{font-size:16px;margin:0}
  textarea{width:100%;min-height:360px;border:0;outline:none;padding:14px;border-radius:0 0 var(--radius) var(--radius);font:13px/1.45 ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;background:#fcfcff}
  .controls{display:flex;flex-wrap:wrap;gap:8px;align-items:center;padding:12px 14px;border-top:1px solid var(--b)}
  button{appearance:none;border:1px solid var(--b);background:var(--accent);color:#fff;padding:10px 14px;border-radius:10px;cursor:pointer;font-weight:600}
  button.secondary{background:#fff;color:#111}
  button.ghost{background:#fff;border-color:var(--b);color:#111}
  .pill{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border:1px solid var(--b);border-radius:999px;background:#fff;font-size:12px}
  .muted{color:var(--muted)}
  .small{font-size:12px}
  .flex{display:flex;gap:10px;align-items:center}
  .table{overflow:auto;max-height:240px;border-top:1px solid var(--b)}
  table{border-collapse:collapse;width:100%;font-size:13px}
  th,td{border-bottom:1px solid var(--b);padding:8px 10px;text-align:left;white-space:nowrap}
  th{background:#fafafc;position:sticky;top:0}
  code.k{background:#f3f4f6;border:1px solid var(--b);padding:2px 6px;border-radius:6px}
  .hint{padding:10px 14px}
  .ok{color:var(--ok)} .warn{color:var(--warn)} .err{color:var(--err)}
</style>
</head>
<body>
<header>
  <h1>Adaptateur de semaines (S1 → Sx) par matière</h1>
  <div class="small muted">Collez votre JSON complet, puis cliquez “Adapter les semaines”.</div>
</header>

<main>
  <section class="grid">
    <div class="card">
      <header><h2>Entrée — Votre JSON</h2></header>
      <textarea id="in" spellcheck="false" placeholder='Collez ici l’objet JSON {"sheets":[...],"programmes":{...}}'></textarea>
      <div class="controls">
        <button class="secondary" id="beautify">Reformater</button>
        <button class="ghost" id="loadSample">Charger mini-exemple</button>
        <span class="pill"><span>Valide :</span><strong id="validBadge" class="err">Non</strong></span>
      </div>
    </div>

    <div class="card">
      <header><h2>Sortie — JSON adapté</h2></header>
      <textarea id="out" spellcheck="false" placeholder="Le JSON adapté apparaîtra ici…" readonly></textarea>
      <div class="controls">
        <button id="adapt">Adapter les semaines</button>
        <button class="secondary" id="download" disabled>Télécharger</button>
        <span class="pill"><span>Feuilles modifiées :</span><strong id="modCount">0</strong></span>
      </div>
    </div>
  </section>

  <section class="card">
    <header><h2>Règles de décalage</h2></header>
    <div class="hint">
      <div class="small muted">Modifiez au besoin (0 = inchangé). Les clés doivent correspondre exactement aux noms de feuilles.</div>
    </div>
    <div class="table">
      <table id="rulesTbl">
        <thead><tr><th>Feuille</th><th>Décalage</th></tr></thead>
        <tbody></tbody>
      </table>
    </div>
    <div class="controls">
      <button class="secondary" id="resetRules">Rétablir règles par défaut</button>
      <span class="small muted">Astuce : double-cliquez sur un décalage pour l’éditer.</span>
    </div>
  </section>

  <section class="card">
    <header><h2>Journal</h2></header>
    <div id="log" class="hint small muted">En attente…</div>
  </section>
</main>

<script>
/* ===================== RÈGLES PAR DÉFAUT ===================== */
const DEFAULT_OFFSETS = {
  "Math": 0,
  "Géométrie": 1,
  "Algèbre": 2,
  "Grandeurs": 4,
  "Traitement de données": 4,
  "Fluences": 1,          // nom de feuille dans ton JSON
  "Ecriture": 4,
  "Géographie": 4,
  "Histoire": 4,
  "Lecture mystère, culture ": 0 // (espace final conservé)
};

/* ===================== UTILITAIRES ===================== */
// "S7" / "s 7" / 7 / "7"  -> 7
function weekToNumber(w) {
  if (typeof w === "number") return w;
  if (typeof w === "string") {
    const m = w.trim().match(/^s?\s*(\d+)$/i);
    if (m) return parseInt(m[1], 10);
  }
  throw new Error(`Format de semaine inattendu: ${String(w)}`);
}
const numberToWeek = n => `S${n}`;

// Retourne une copie de row avec Semaine décalée, si présent
function shiftRowWeek(row, offset, normalizeToS=true) {
  if (!row || !Object.prototype.hasOwnProperty.call(row, "Semaine")) return row;
  try {
    const n = weekToNumber(row.Semaine);
    const newN = n + offset;
    // normalise au format "Sx" sur les feuilles décalées (clair/net)
    return { ...row, Semaine: normalizeToS ? numberToWeek(newN) : newN };
  } catch {
    // si la semaine n’est pas convertible, on ne modifie pas
    return row;
  }
}

// Adaptation globale sur une copie profonde
function adaptWeeks(data, offsets) {
  const copy = structuredClone ? structuredClone(data) : JSON.parse(JSON.stringify(data));
  let modifiedSheets = 0;

  for (const [sheetName, offset] of Object.entries(offsets)) {
    if (!offset || offset === 0) continue;
    const prog = copy?.programmes?.[sheetName];
    if (!prog || !Array.isArray(prog.rows)) continue;

    prog.rows = prog.rows.map(row => shiftRowWeek(row, offset, true));
    modifiedSheets++;
  }
  return { adapted: copy, modifiedSheets };
}

// Validation légère de la structure attendue
function validateRoot(obj) {
  return obj && typeof obj === "object" && "programmes" in obj;
}

// Beautify JSON
function pretty(obj) {
  return JSON.stringify(obj, null, 2);
}

/* ===================== UI – RÈGLES ===================== */
const rulesState = { ...DEFAULT_OFFSETS };
const rulesTblBody = document.querySelector("#rulesTbl tbody");

function renderRules() {
  rulesTblBody.innerHTML = "";
  Object.entries(rulesState).forEach(([name, val]) => {
    const tr = document.createElement("tr");
    const tdName = document.createElement("td");
    const tdVal = document.createElement("td");
    tdName.textContent = name;

    const span = document.createElement("span");
    span.textContent = val;
    span.className = "code";
    span.style.cursor = "pointer";
    span.title = "Double-cliquez pour modifier";

    span.addEventListener("dblclick", () => {
      const nv = prompt(`Décalage pour "${name}" (peut être négatif, 0 ou positif) :`, String(rulesState[name]));
      if (nv === null) return;
      const parsed = Number(nv);
      if (Number.isNaN(parsed) || !Number.isFinite(parsed)) {
        log(`Décalage invalide pour ${name}.`, "err");
        return;
      }
      rulesState[name] = Math.trunc(parsed);
      renderRules();
    });

    tdVal.appendChild(span);
    tr.appendChild(tdName);
    tr.appendChild(tdVal);
    rulesTblBody.appendChild(tr);
  });
}

/* ===================== UI – PRINCIPALE ===================== */
const elIn = document.getElementById("in");
const elOut = document.getElementById("out");
const elAdapt = document.getElementById("adapt");
const elBeautify = document.getElementById("beautify");
const elDownload = document.getElementById("download");
const elValid = document.getElementById("validBadge");
const elModCount = document.getElementById("modCount");
const elLog = document.getElementById("log");
const elLoadSample = document.getElementById("loadSample");
const elResetRules = document.getElementById("resetRules");

function log(msg, level="") {
  const color = level==="ok" ? "ok" : level==="warn" ? "warn" : level==="err" ? "err" : "muted";
  const line = `<div class="${color}">${new Date().toLocaleTimeString()} — ${msg}</div>`;
  elLog.innerHTML = line + elLog.innerHTML;
}

function parseInput() {
  try {
    const obj = JSON.parse(elIn.value);
    const valid = validateRoot(obj);
    elValid.textContent = valid ? "Oui" : "Non";
    elValid.className = valid ? "ok" : "err";
    return valid ? obj : null;
  } catch(e) {
    elValid.textContent = "Non";
    elValid.className = "err";
    return null;
  }
}

function doBeautify() {
  try {
    const obj = JSON.parse(elIn.value);
    elIn.value = pretty(obj);
    parseInput();
    log("Entrée reformatée.");
  } catch {
    log("JSON invalide : impossible de reformater.", "err");
  }
}

function doAdapt() {
  const obj = parseInput();
  if (!obj) { log("Veuillez fournir un JSON valide.", "err"); return; }

  const { adapted, modifiedSheets } = adaptWeeks(obj, rulesState);
  elOut.value = pretty(adapted);
  elModCount.textContent = String(modifiedSheets);
  elDownload.disabled = false;

  if (modifiedSheets === 0) {
    log("Aucune feuille n’a été modifiée (tous les décalages = 0 ou feuilles introuvables).", "warn");
  } else {
    log(`Adaptation effectuée sur ${modifiedSheets} feuille(s).`, "ok");
  }
}

function doDownload() {
  const blob = new Blob([elOut.value], { type: "application/json;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url; a.download = "programmes_adaptes.json";
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
  log("Fichier téléchargé : programmes_adaptes.json", "ok");
}

function loadSample() {
  const sample = {
    "sheets": ["Math","Géométrie","Algèbre","Grandeurs","Traitement de données","Fluences","Ecriture","Géographie","Histoire","Lecture mystère, culture "],
    "programmes": {
      "Math": {
        "columns":["Semaine","Matière","Objectifs","Notions travaillées"],
        "rows":[
          {"Semaine":"S1","Matière":"Additions ≤ 100","Objectifs":"…","Notions travaillées":"…"},
          {"Semaine":"S2","Matière":"Soustractions ≤ 100","Objectifs":"…","Notions travaillées":"…"}
        ]
      },
      "Géométrie": {
        "columns":["Semaine","Objectif","Activité de tracé","Trace écrite"],
        "rows":[
          {"Semaine":1,"Objectif":"Revoir le vocabulaire","Activité de tracé":"…","Trace écrite":"…"},
          {"Semaine":2,"Objectif":"Tracer des segments","Activité de tracé":"…","Trace écrite":"…"}
        ]
      },
      "Algèbre": {
        "columns":["Semaine","Objectif","Activité","Trace écrite"],
        "rows":[
          {"Semaine":"S1","Objectif":"Numération","Activité":"…","Trace écrite":"…"},
          {"Semaine":"S3","Objectif":"Décomposer","Activité":"…","Trace écrite":"…"}
        ]
      },
      "Grandeurs": { "columns":["Semaine"], "rows":[ {"Semaine":"S1"},{"Semaine":"S4"} ] },
      "Traitement de données": { "columns":["Semaine"], "rows":[ {"Semaine":"S2"},{"Semaine":"S5"} ] },
      "Fluences": { "columns":["Semaine"], "rows":[ {"Semaine":"S7"},{"Semaine":"S8"} ] },
      "Ecriture": { "columns":["Semaine"], "rows":[ {"Semaine":"S10"} ] },
      "Géographie": { "columns":["Semaine"], "rows":[ {"Semaine": 3} ] },
      "Histoire": { "columns":["Semaine"], "rows":[ {"Semaine":"7"} ] },
      "Lecture mystère, culture ": {
        "columns":["Semaine","Personnage Belge","Personnage du Monde","Fait/Monument"],
        "rows":[ {"Semaine":1,"Personnage Belge":"Adolphe Sax","Personnage du Monde":"Jules César","Fait/Monument":"Pyramides"} ]
      }
    }
  };
  elIn.value = pretty(sample);
  parseInput();
  log("Mini-exemple chargé.");
}

/* ===================== INIT ===================== */
renderRules();
parseInput();
elBeautify.addEventListener("click", doBeautify);
elAdapt.addEventListener("click", doAdapt);
elDownload.addEventListener("click", doDownload);
elLoadSample.addEventListener("click", loadSample);
elResetRules.addEventListener("click", () => {
  Object.keys(rulesState).forEach(k => delete rulesState[k]);
  Object.assign(rulesState, DEFAULT_OFFSETS);
  renderRules();
  log("Règles par défaut restaurées.");
});

// feedback validité à la volée
elIn.addEventListener("input", parseInput);
</script>
</body>
</html>
