// Décalages demandés par feuille
const WEEK_OFFSETS = {
  "Géométrie": 1,
  "Algèbre": 2,
  "Grandeurs": 4,
  "Traitement de données": 4,
  "Fluences": 1,
  "Ecriture": 4,
  "Géographie": 4,
  "Histoire": 4,
  // "Math": 0,                // laisses "Math" tel quel
  // "Lecture mystère, culture ": 0 // tel quel aussi (note l’espace final)
};

// Convertit "S7" -> 7, "s7" -> 7, 7 -> 7, "7" -> 7
function weekToNumber(w) {
  if (typeof w === "number") return w;
  if (typeof w === "string") {
    const m = w.trim().match(/^s?\s*(\d+)$/i);
    if (m) return parseInt(m[1], 10);
  }
  throw new Error(`Format de semaine inattendu: ${String(w)}`);
}

// Retourne au format "S{n}"
function numberToWeek(n) {
  return `S${n}`;
}

function shiftRowWeek(row, offset) {
  if (!row || !Object.prototype.hasOwnProperty.call(row, "Semaine")) return row;
  const n = weekToNumber(row.Semaine);
  return { ...row, Semaine: numberToWeek(n + offset) };
}

function adaptWeeks(data) {
  // On travaille sur une copie immuable
  const copy = JSON.parse(JSON.stringify(data));

  // Pour chaque programme concerné, on applique le décalage
  for (const [sheet, offset] of Object.entries(WEEK_OFFSETS)) {
    const prog = copy.programmes?.[sheet];
    if (!prog || !Array.isArray(prog.rows)) continue;

    prog.rows = prog.rows.map(row => shiftRowWeek(row, offset));
  }

  return copy;
}

// --- Exemple d'utilisation ---
// const adapted = adaptWeeks(originalData);
// console.log(adapted);
